/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.GadaGadars.view;

import com.GadaGadars.controller.binarysearch;
import static com.GadaGadars.controller.binarysearch.binarySearch;

import static com.GadaGadars.controller.mergesort.findMaxTopScore;
import static com.GadaGadars.controller.mergesort.findMaxTotalMatches;

import static com.GadaGadars.controller.mergesort.findMinTopScore;
import static com.GadaGadars.controller.mergesort.findMinTotalMatches;
import static com.GadaGadars.controller.mergesort.findPlayerDetailsByTopScore;
import static com.GadaGadars.controller.mergesort.findPlayerDetailsByTotalMatches;

import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class Gadagadars extends javax.swing.JFrame {

    private String userInput;
    private ArrayList<Gadagadars> GadagadarsList;

    /**
     * Creates new form NewJFrame
     */
    public Gadagadars() {
        this("arg1", "arg2", "arg3", "arg4", "arg5", "arg6", "arg7", "arg8");
    }

    /**
     * Creates new form NewJFrame
     */
    public Gadagadars(String arg1, String arg2, String arg3, String arg4, String arg5, String arg6, String arg7, String arg8) {
        initComponents();
        
        completecode.setVisible(
                true
        );
        addstudent.setVisible(false);
        addstudent.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jerseyno = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        completecode = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        addplayer = new javax.swing.JButton();
        updateplayer = new javax.swing.JButton();
        deleteplayer = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        addplayertable1 = new javax.swing.JTable();
        search = new javax.swing.JTextField();
        search1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        addstudent = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        batsman = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        marriagestatus = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        totalmatches = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        topscore = new javax.swing.JTextField();
        jerseyno1 = new javax.swing.JTextField();
        addstudent1 = new javax.swing.JButton();
        status = new javax.swing.JTextField();
        role = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Pictures\\gadagadars (2.1).png")); // NOI18N
        jLabel1.setText("gada gadars lets play cricket together ");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Pictures\\gadagadars (2.1).png")); // NOI18N
        jLabel2.setText("gada gadars lets play cricket together ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 90, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        completecode.setBackground(new java.awt.Color(204, 204, 255));

        jLabel3.setBackground(new java.awt.Color(204, 204, 255));
        jLabel3.setFont(new java.awt.Font("MS Reference Sans Serif", 2, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\Pictures\\gadagadars (2.1).png")); // NOI18N
        jLabel3.setText("gada gadars lets play cricket together ");

        addplayer.setText("Add player");
        addplayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addplayerActionPerformed(evt);
            }
        });

        updateplayer.setText("Update player");
        updateplayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateplayerActionPerformed(evt);
            }
        });

        deleteplayer.setText("Delete player");
        deleteplayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteplayerActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("gadagadars Let's play cricket");
        jPanel5.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 360, 90));

        addplayertable1.setBackground(new java.awt.Color(204, 204, 255));
        addplayertable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "ms dhoni", "bihar", "batsman", "playing ", "married ", "100", "199"},
                {"2", "yuvraj singh ", "panjab", "batsman ", "retired  ", "married ", "200", "2999"},
                {"3", "sandeep lamichanane ", "nepal", "bolower ", "playing", "unmarried ", "50", "299"},
                {"4 ", "parash khadka ", "nepal", "batsman", "retired ", "married ", "200", "2500"},
                {"5", "dependra  singh adrie", "nepal", " batsman", "retired", "married ", "200", "2300"},
                {"6", "sachin tendulkar", "mumbai ", "batsman", "retired ", "married", "200", "2400"},
                {"7", "virat koholi", "india", "batsman", "playing ", "married ", "299", "2000"},
                {"8", "navjoth singh siddhu ", "panjav", "batsman", "retired ", "married", "199", "1500"}
            },
            new String [] {
                "jersey number ", "cricketer name", "address", "role ", "status ", "marrige status", "top score ", "totalmatchesplayed "
            }
        ));
        jScrollPane3.setViewportView(addplayertable1);

        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        search1.setText("search");
        search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search1ActionPerformed(evt);
            }
        });

        jButton1.setText(" Sort for the score");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(" sort for the  total matches ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout completecodeLayout = new javax.swing.GroupLayout(completecode);
        completecode.setLayout(completecodeLayout);
        completecodeLayout.setHorizontalGroup(
            completecodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(completecodeLayout.createSequentialGroup()
                .addGroup(completecodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(completecodeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(completecodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(updateplayer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                        .addComponent(deleteplayer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(completecodeLayout.createSequentialGroup()
                        .addComponent(search1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(142, 142, 142)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1327, 1327, 1327))
        );
        completecodeLayout.setVerticalGroup(
            completecodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(completecodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(completecodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(completecodeLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(22, 22, 22)
                        .addGroup(completecodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(search1)
                            .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(306, 306, 306)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        addstudent.setBackground(new java.awt.Color(204, 204, 255));
        addstudent.setPreferredSize(new java.awt.Dimension(1806, 1141));
        addstudent.setRequestFocusEnabled(false);
        addstudent.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setText("Name");
        addstudent.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 50, -1));
        addstudent.add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 130, -1));

        jLabel6.setText("Address");
        addstudent.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 60, -1));
        addstudent.add(address, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 130, -1));

        jLabel7.setText("role ");
        addstudent.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 40, -1));

        batsman.setText("status");
        addstudent.add(batsman, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 60, -1));

        jLabel8.setText("marrige status ");
        addstudent.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, -1, 30));

        marriagestatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "married", "divorced", "single" }));
        addstudent.add(marriagestatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 180, 150, -1));

        jLabel9.setText("Total matches");
        addstudent.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 80, 20));
        addstudent.add(totalmatches, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 130, -1));

        jLabel10.setText("Jersey no");
        addstudent.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 70, 20));

        jLabel12.setText("top score ");
        addstudent.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));
        addstudent.add(topscore, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, 130, -1));

        jerseyno1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jerseyno1ActionPerformed(evt);
            }
        });
        addstudent.add(jerseyno1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, 130, -1));

        addstudent1.setText("addplayer");
        addstudent1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addstudent1ActionPerformed(evt);
            }
        });
        addstudent.add(addstudent1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 110, -1));

        status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusActionPerformed(evt);
            }
        });
        addstudent.add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 140, -1));
        addstudent.add(role, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 130, -1));

        jButton3.setText("back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        addstudent.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 330, 120, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(completecode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addstudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(completecode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(118, Short.MAX_VALUE)
                    .addComponent(addstudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap(98, Short.MAX_VALUE)))
        );

        addstudent.getAccessibleContext().setAccessibleParent(addplayer);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addplayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addplayerActionPerformed
// this is used to add the player in the main panel 
/*
 the major purpose  of  the add player is that it will redirect to the user for the  next  panel  which consist all the  details for the 
 user  like textfield and so on 
*/
        addstudent.setVisible(true
        );
completecode.setVisible(false);
repaint();

revalidate();
       
    }//GEN-LAST:event_addplayerActionPerformed

    private void deleteplayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteplayerActionPerformed
        // TODO add your handling code here:
int selectedRow = addplayertable1.getSelectedRow();
if (selectedRow != -1) {
    DefaultTableModel tableModel = (DefaultTableModel) addplayertable1.getModel();
    tableModel.removeRow(selectedRow);
} else {
    JOptionPane.showMessageDialog(null, "Please select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
}
        
    }//GEN-LAST:event_deleteplayerActionPerformed

    private void jerseyno1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jerseyno1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jerseyno1ActionPerformed

    private void addstudent1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addstudent1ActionPerformed
/*
         it is used to get text  for the value recieved by the  user for the data recived
        parameter  used jersey no, player name , address , role status  marrigestatus top score , matches
         method used get text and trim 
        */
     String jerseyNoText = jerseyno1.getText().trim();
String playerName = name.getText().trim();
String addressText = address.getText().trim();
String roleText = role.getText().trim();
String statusText = status.getText().trim();

String marriageStatus = (String) marriagestatus.getSelectedItem();
String topScoreText = topscore.getText().trim();
String matchesText = totalmatches.getText().trim();
DefaultTableModel tableModel = (DefaultTableModel) addplayertable1.getModel();// used to  updtate the value in the table 

try {
    if (!jerseyNoText.isEmpty()) {
        int jerseyNo = Integer.parseInt(jerseyNoText);
        if (jerseyNo < 1 || jerseyNo > 15) {
            throw new IllegalArgumentException("Jersey number must be between 1 and 15");
        }// check for the jersey number is empty or not ot it should be in between the value of 1 and 15 

        // Check if the jersey number is already in the table
        for (int row = 0; row < tableModel.getRowCount(); row++) {
            if (tableModel.getValueAt(row, 0).equals(jerseyNoText)) {
                throw new IllegalArgumentException("Jersey number must be unique");
            }
        }
    } else {
        throw new IllegalArgumentException("Jersey number cannot be empty");// display the message 
    }

    if (playerName.isEmpty()) {
        throw new IllegalArgumentException("Player name cannot be empty");// check for the player name is empty or not 
    }

    if (addressText.isEmpty()) {
        throw new IllegalArgumentException("Address cannot be empty"); // check for the address should be empty or not 
    }

    if (roleText.isEmpty()) {
        throw new IllegalArgumentException("Role cannot be empty");// check for thee  role is empty
    }

    if (statusText.isEmpty()) {
        throw new IllegalArgumentException("Status cannot be empty");// check for the status is empty or not 
    }

    // Additional checks for alphanumeric characters in playerName, addressText, roleText, and statusText
    if (!playerName.matches("[a-zA-Z ]+")) {
        throw new IllegalArgumentException("Player name should only contain alphabets and spaces");
    }

    if (!addressText.matches("[a-zA-Z0-9 ]+")) {
        throw new IllegalArgumentException("Address should only contain alphanumeric characters and spaces");
    }

    if (!roleText.matches("[a-zA-Z ]+")) {
        throw new IllegalArgumentException("Role should only contain alphabets and spaces");
    }

    if (!statusText.matches("[a-zA-Z ]+")) {
        throw new IllegalArgumentException("Status should only contain alphabets and spaces");
    }
// check for the top score should be in between the 300 and 800
    if (!topScoreText.isEmpty()) {
        int topScore = Integer.parseInt(topScoreText);
        if (topScore < 300 || topScore > 800) {
            throw new IllegalArgumentException("Top score must be between 300 and 800");
        }
    } else {
        throw new IllegalArgumentException("Top score cannot be empty");
    }
// checks for matche for the betweem the 300 and 500
    if (!matchesText.isEmpty()) {
        int totalMatches = Integer.parseInt(matchesText);
        if (totalMatches < 300 || totalMatches > 500) {
            throw new IllegalArgumentException("Total matches must be between 300 and 500");
        }
    } else {
        throw new IllegalArgumentException("Total matches cannot be empty");
    }
  /*
     create an new object for delete of table 
    @param usedjerseyNoText, playerName, addressText, roleText, statusText, marriageStatus, topScoreText, matchesText};
    tableModel.addRow(rowData
    */
    Object[] rowData = {jerseyNoText, playerName, addressText, roleText, statusText, marriageStatus, topScoreText, matchesText};
    tableModel.addRow(rowData);

    // Display success message
    JOptionPane.showMessageDialog(null, "Player added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);

} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Invalid input for jersey number, top score, or total matches", "Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace(); // Handle or log the exception as needed
} catch (IllegalArgumentException e) {
    JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace(); // Handle or log the exception as needed
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "An unexpected error occurred", "Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace(); // Handle or log the exception as needed
}


         }//GEN-LAST:event_addstudent1ActionPerformed

    private void updateplayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateplayerActionPerformed
   
      String jerseyNoText = JOptionPane.showInputDialog("Enter Jersey Number:").trim();

// Check if jersey number is null or empty
if (jerseyNoText == null || jerseyNoText.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Jersey number cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if there's an error
}

// Validate the entered jersey number for alphanumeric characters
if (!jerseyNoText.matches("\\d+")) {
    JOptionPane.showMessageDialog(null, "Invalid Jersey number format (only digits are allowed)", "Error", JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if there's an error
}

// Parse the jersey number to an integer
int jerseyNo;
try {
    jerseyNo = Integer.parseInt(jerseyNoText);

    // Validate the range of the jersey number
    if (jerseyNo < 1 || jerseyNo > 15) {
        JOptionPane.showMessageDialog(null, "Jersey number must be between 1 and 15", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if there's an error
    }
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Invalid Jersey number format", "Error", JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if there's an error
}

// Get the table model and row count
DefaultTableModel model = (DefaultTableModel) addplayertable1.getModel();
int rowCount = model.getRowCount();

// Search for the player with the specified jersey number
Object[] playerToUpdate = null;
for (int i = 0; i < rowCount; i++) {
    int currentJerseyNo = Integer.parseInt(model.getValueAt(i, 0).toString());

    if (currentJerseyNo == jerseyNo) {
        // Create a new PlayerData instance with existing data
        playerToUpdate = model.getDataVector().elementAt(i).toArray();
        break; // Exit the loop once the player is found
    }
}


if (playerToUpdate == null) 
{
    JOptionPane.showMessageDialog(null, "Player with Jersey number " + jerseyNo + " does not exist in the table", "Error", JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if the player does not exist
}

for (int i = 0; i < rowCount; i++) {
    int currentJerseyNo = Integer.parseInt(model.getValueAt(i, 0).toString());

    if (currentJerseyNo == jerseyNo) {
       
        playerToUpdate = model.getDataVector().elementAt(i).toArray();
          
        break; 
    }
}
// check for the null value 
if (playerToUpdate != null) {
    // Create the update panel
    JPanel updatePanel = new JPanel();
    updatePanel.setLayout(new GridLayout(4, 4));
/*
     used to get the textfiled
    @param used name, address, role , status, marrige status, topscore and total runs
    */
    JTextField nameField = new JTextField(8);
    JTextField addressField = new JTextField(8);
    JTextField roleField = new JTextField(8);
    JTextField statusField = new JTextField(8);
    JTextField marriageStatusField = new JTextField(8);
    JTextField topScoreField = new JTextField(8);
    JTextField totalRunsField = new JTextField(8);

/*
     used to create the jlabel 
    @param used name, address, role status, marrige staatus , topscore, total matches played
    */
    updatePanel.add(new JLabel("Name:"));
    updatePanel.add(nameField);
    updatePanel.add(new JLabel("Address:"));
    updatePanel.add(addressField);
    updatePanel.add(new JLabel("Role:"));
    updatePanel.add(roleField);
    updatePanel.add(new JLabel("Status:"));
    updatePanel.add(statusField);
    updatePanel.add(new JLabel("Marriage Status:"));
    updatePanel.add(marriageStatusField);
    updatePanel.add(new JLabel("Top Score:"));
    updatePanel.add(topScoreField);
    updatePanel.add(new JLabel("Total matches played:"));
    updatePanel.add(totalRunsField);

    // Display the JOptionPane for updating player information
    int result = JOptionPane.showConfirmDialog(null, updatePanel, "Update Player Information",
            JOptionPane.OK_CANCEL_OPTION);
/*
     if matches the  result should have the   updated named and contains all the  value
    @param used upated name , updated address, updated role, updated status, updaated marriage status  updated topscore 
    total runs 
    method used get text  and trim 
   
    */
    if (result == JOptionPane.OK_OPTION) {
       
        String updatedName = nameField.getText().trim();
        String updatedAddress = addressField.getText().trim();
        String updatedRole = roleField.getText().trim();
        String updatedStatus = statusField.getText().trim();
        String updatedMarriageStatus = marriageStatusField.getText().trim();
        String updatedTopScore = topScoreField.getText().trim();
        String updatedTotalRuns = totalRunsField.getText().trim();
        
        
        
        
        
        
        
        /*
         used  to set the value based on the table 
        @ param useed name , address. role ,status , marriage status , top score and total runs
        
         method used set value  and get text 
        properties used to count the number of the row and column in the table 
    
        */
        model.setValueAt(nameField.getText().trim(), 1, 1);
            model.setValueAt(addressField.getText().trim(), 2, 2);
            model.setValueAt(roleField.getText().trim(), 3, 3);
            model.setValueAt(statusField.getText().trim(), 4, 4);
            model.setValueAt(marriageStatusField.getText().trim(), 5, 5);
            model.setValueAt(topScoreField.getText().trim(), 6, 6);
            model.setValueAt(totalRunsField.getText().trim(), 7, 7);


        

        // Print or process the updated player information
        System.out.println("Player Information Updated:");
    
    }
} else {
    JOptionPane.showMessageDialog(null, "Player not found", "Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_updateplayerActionPerformed


    private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_statusActionPerformed

    private void search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search1ActionPerformed
 // Assuming 'algorithm' is an instance of the 'binarysearch' class
binarysearch algorithm = new binarysearch();

    }//GEN-LAST:event_search1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to go back to the main panel?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
        System.out.println("Going back to the main panel...");
         completecode.setVisible(
                true);
         repaint();
        revalidate();

              
            
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
DefaultTableModel model = (DefaultTableModel) addplayertable1.getModel();
int rowCount = model.getRowCount();
List<List<String>> data = new ArrayList<>();

// Extract data from the table
for (int row = 0; row < rowCount; row++) {
    List<String> rowData = new ArrayList<>();
    for (int col = 0; col < model.getColumnCount(); col++) {
        rowData.add(model.getValueAt(row, col).toString());
    }
    data.add(rowData);
}

try {
    int maxTotalMatches = findMaxTotalMatches(data);
    int minTotalMatches = findMinTotalMatches(data);

    // Find the player details with the max total matches
    List<String> playerDetailsMax = findPlayerDetailsByTotalMatches(data, maxTotalMatches);
    // Find the player details with the min total matches
    List<String> playerDetailsMin = findPlayerDetailsByTotalMatches(data, minTotalMatches);

    
   String message = "Max Total Matches: " + maxTotalMatches + "\nPlayer Details (Max Total Matches): " + playerDetailsMax
        + "\n\nMin Total Matches: " + minTotalMatches + "\nPlayer Details (Min Total Matches): " + playerDetailsMin;

JOptionPane.showMessageDialog(null, message, "Player Information", JOptionPane.INFORMATION_MESSAGE);

} catch (NumberFormatException e) {
    // Handle the exception (e.g., display an error message)
    System.out.println("Error: Invalid data in the specified column");
}
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
DefaultTableModel model = (DefaultTableModel) addplayertable1.getModel();
int rowCount = model.getRowCount();
List<List<String>> data = new ArrayList<>();

// Extract data from the table
for (int row = 0; row < rowCount; row++) {
    List<String> rowData = new ArrayList<>();
    for (int col = 0; col < model.getColumnCount(); col++) {
        rowData.add(model.getValueAt(row, col).toString());
    }
    data.add(rowData);
}
try {
            int maxTopScore = findMaxTopScore(data);
            int minTopScore = findMinTopScore(data);

            // Find the player details with the max top score
            List<String> playerDetailsMax =  findPlayerDetailsByTopScore(data, maxTopScore);
            // Find the player details with the min top score
            List<String> playerDetailsMin = findPlayerDetailsByTopScore(data, minTopScore);

            // Display the max and min top scores along with details of the players
            String message = "Max Top Score: " + maxTopScore + "\nPlayer Details (Max Top Score): " + playerDetailsMax
                    + "\n\nMin Top Score: " + minTopScore + "\nPlayer Details (Min Top Score): " + playerDetailsMin;

         JOptionPane.showMessageDialog(null, message, "Player Information", JOptionPane.INFORMATION_MESSAGE);


        } catch (NumberFormatException e) {
            // Handle the exception (e.g., display an error message)
            System.out.println("Error: Invalid data in the specified column");
        }
    


    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed


    /*
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gadagadars.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gadagadars.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gadagadars.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gadagadars.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gadagadars().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addplayer;
    private javax.swing.JTable addplayertable1;
    private javax.swing.JTextField address;
    private javax.swing.JPanel addstudent;
    private javax.swing.JButton addstudent1;
    private javax.swing.JLabel batsman;
    private javax.swing.JPanel completecode;
    private javax.swing.JButton deleteplayer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jerseyno;
    private javax.swing.JTextField jerseyno1;
    private javax.swing.JComboBox<String> marriagestatus;
    private javax.swing.JTextField name;
    private javax.swing.JTextField role;
    private javax.swing.JTextField search;
    private javax.swing.JButton search1;
    private javax.swing.JTextField status;
    private javax.swing.JTextField topscore;
    private javax.swing.JTextField totalmatches;
    private javax.swing.JButton updateplayer;
    // End of variables declaration//GEN-END:variables

    private void updateRow(String existingJerseyNo, String existingPlayerName, String existingAddressText, String existingRoleText, String existingStatusText, String existingMarriageStatus, String existingTopScoreText, String existingMatchesText) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void updateTable(ArrayList<Gadagadars> sortedListByScore) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void addplayertable1(ArrayList<Gadagadars> sortedListByScore) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

   

}
